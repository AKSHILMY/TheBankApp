INSERT INTO centralized_account(Account_No,Balance,Account_Type,Special_Request_Permission) VALUES(?,?,?,?);,
INSERT INTO customer(Name,Username,Password,Account_No,DOB,Phone_No,Email,Gender) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO assigned_agent(Customer_ID,Agent_ID) VALUES((SELECT Customer_ID from customer ORDER BY Customer_ID DESC LIMIT 1),?);
INSERT INTO fixed_deposit(Account_No,Customer_ID,Amount,Period,DateofDeposit) VALUES(?,?,?,?,?,?,?);
INSERT INTO agent(Name) VALUES(?);
INSERT INTO assigned_agent(Customer_ID,Agent_ID) VALUES (?,?);
INSERT INTO agent(Name,NIC,DOB,Phone_No,Email,Username,Password,Gender) VALUES(?,?,?,?,?,?,?,?);

===================================================================================================================================================================
select * from (select * from customer natural join centralized_account where customer.Account_No=centralized_account.Account_No) as x natural join assigned_agent where x.Customer_ID=assigned_agent.Customer_ID;
select Account_No,Name,Phone_No,x.Customer_ID,Agent_ID from (select fixed_deposit.Account_No,Name,Phone_No,customer.Customer_ID from customer inner join fixed_deposit on customer.Customer_ID=fixed_deposit.Customer_ID) as x inner join assigned_agent on x.Customer_ID=assigned_agent.Customer_ID;
select Account_No,Name,Phone_No,Period,x.Customer_ID,Agent_ID from (select fixed_deposit.Account_No,Name,Phone_No,Period,customer.Customer_ID from customer inner join fixed_deposit on customer.Customer_ID=fixed_deposit.Customer_ID) as x inner join assigned_agent on x.Customer_ID=assigned_agent.Customer_ID;
select Customer_ID from fixed_deposit;
select fixed_deposit.Account_No,Period,Amount,DateofDeposit from fixed_deposit inner join customer on fixed_deposit.Customer_ID=customer.Customer_ID;
select Account_No,Amount,Period,DateofDeposit from (select fixed_deposit.Account_No,Amount,Name,Phone_No,Period,DateofDeposit,customer.Customer_ID from customer inner join fixed_deposit on customer.Customer_ID=fixed_deposit.Customer_ID) as x inner join assigned_agent on x.Customer_ID=assigned_agent.Customer_ID;
select Account_No,x.Name,Amount,Period,DateofDeposit,x.Customer_ID from (select fixed_deposit.Account_No,Amount,Name,Phone_No,Period,DateofDeposit,customer.Customer_ID from customer inner join fixed_deposit on customer.Customer_ID=fixed_deposit.Customer_ID) as x inner join assigned_agent on x.Customer_ID=assigned_agent.Customer_ID;
select  Agent_ID,y.Name,NIC,Phone_No,z.Name from (select Agent_ID,Name,NIC,Phone_No,Customer_ID from assigned_agent natural join (select Agent_ID,Name,NIC,Phone_NO from agent) as x where x.Agent_ID=assigned_agent.Agent_ID) as y inner join (select Customer_ID,Name from customer) as z where y.Customer_ID=z.Customer_ID;
select Agent_ID,Name,NIC,Phone_No from Agent;
select   Agent_ID,y.Name,NIC,DOB,Phone_No,Username,Password,Email,z.Name from (select x.Agent_ID,Name,NIC,DOB,Phone_No,Username,Password,Email,Customer_ID from assigned_agent right outer join (select * from agent) as x on x.Agent_ID=assigned_agent.Agent_ID) as y left outer join (select Customer_ID,Name from customer) as z on  y.Customer_ID=z.Customer_ID;
=====================================UPDATE===========================================================================================================================

UPDATE centralized_account
SET Account_Type=?
WHERE Account_No=?;

UPDATE centralized_account
SET Special_Request_Permission=?
WHERE Account_No=?;

UPDATE customer
SET Password=?
WHERE Account_No=?;

UPDATE customer
SET Email=?
WHERE Account_No=?;

UPDATE customer
SET Phone_No=?
WHERE Account_No=?;

UPDATE assigned_agent
SET Agent_ID=?
WHERE Customer_ID=?;

============================DELETE============================================================================================
DELETE FROM centralized_account WHERE Account_No=?;
DELETE FROM assigned_agent WHERE Customer_ID=?;
DELETE FROM agent WHERE Agent_ID=?;




============================EVENT==========================================================================================
use bankapp;
drop event update_account_balance_with_interest;
drop PROCEDURE update_account_balances;
DELIMITER ;;
CREATE PROCEDURE update_account_balances()
BEGIN
DECLARE cursor_Account_No VARCHAR(45) DEFAULT "";
DECLARE cursor_Balance decimal(8,2) DEFAULT 0.0;
DECLARE cursor_Account_Type VARCHAR(45) DEFAULT "";
DECLARE done INT DEFAULT FALSE;
DECLARE cursor_e CURSOR FOR SELECT Account_No, Balance, Account_Type FROM centralized_account;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN cursor_e;
read_loop: LOOP
  FETCH cursor_e INTO cursor_Account_No, cursor_Balance, cursor_Account_Type;
  IF done THEN
    LEAVE read_loop;
  END IF;
  update centralized_account 
  set Balance = cursor_Balance * ((100+ (select Rate from interest where Account_Type = cursor_Account_Type)/12)/100)
  where Account_No = cursor_Account_No;
  insert into interest_log(Account_No,Interest_add,Balance) values (cursor_Account_No,cursor_Balance * (((select Rate from interest where Account_Type = cursor_Account_Type)/12)/100),cursor_Balance);
END LOOP;
CLOSE cursor_e;
END;
;;
DELIMITER ;


call update_account_balances();

create event update_account_balance_with_interest
ON schedule every 1 month
do
	call update_account_balances();



==============================================EVENT2=====================================================================================
DELIMITER ;;
CREATE PROCEDURE update_fixed_account_balances()
BEGIN
DECLARE cursor_Account_No CHAR(10) DEFAULT "";
DECLARE cursor_Amount DECIMAL(10,2) DEFAULT 0.0;
DECLARE cursor_Period DECIMAL(8,2) DEFAULT 0.0;
DECLARE cursor_date DATE DEFAULT "0000-00-00";
DECLARE done INT DEFAULT FALSE;
DECLARE cursor_e CURSOR FOR SELECT Account_No,Amount,Period,DateofDeposit FROM fixed_deposit;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN cursor_e;
read_loop: LOOP
  FETCH cursor_e INTO cursor_Account_No, cursor_Amount, cursor_Period,cursor_date;
  IF done THEN
    LEAVE read_loop;
  END IF;
  update centralized_account 
  set Balance =Balance+ cursor_Amount * (((select rate from fd_interest where Period = cursor_Period)/12)/100)
  where Account_No = (select customer.Account_No from fixed_deposit inner join customer on fixed_deposit.Customer_ID=customer.Customer_ID where fixed_deposit.Account_No=cursor_Account_No);
  -- insert into interest_log(Account_No,Interest_add,Balance) values (cursor_Account_No,cursor_Balance * (((select Rate from interest where Account_Type = cursor_Account_Type)/12)/100),cursor_Balance);
END LOOP;
CLOSE cursor_e;
END;
;;
DELIMITER ;


call update_fixed_account_balances();

create event update_account_balance_with_interest_FD
ON schedule every 1 month starts "2022-01-01"
do
	call update_fixed_account_balances();

=======================================================Trigger============================================================================
create trigger on_centralized_account_update
    after update on centralized_account
    for each row
    update customer set ISActive = "No" where NEW.Balance<=1000 and Account_NO=OLD.Account_No;

create trigger on_centralized_account_update_Active
    after update on centralized_account
    for each row
    update customer set ISActive = "Yes" where NEW.Balance>1000 and Account_NO=OLD.Account_No;